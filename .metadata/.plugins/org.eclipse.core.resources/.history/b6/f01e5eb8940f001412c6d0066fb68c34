package com.huuta.examplefrontend;

import javax.swing.JPanel;

import com.codefarm.engine.Code;
import com.codefarm.interaction.CodeSpace;
import com.codefarm.interaction.FrontEnd;

import javax.swing.JScrollPane;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JOptionPane;
import javax.swing.JTable;

import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.table.DefaultTableModel;
import javax.swing.JLabel;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class CodeSpaceTab extends JPanel implements Observer {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private CodeSpace _myCs;
	private int _myCsId;
	private FrontEnd _frontEnd;
	private int _codeLen;
	private String _excludes;
	private int _codeCount;
	private String _name;
	private GridLayout _layout;
	private JTable _codeListTable;
	private DefaultTableModel _codeListTableModel;
	private JLabel _csNameLabel;
	private JLabel _codeLenLabel;
	private JLabel _excludesLabel;
	private JLabel _codesCountLabel;
	private CodeInfoPanel _codeInfoPanel;
	
	/**
	 * Create the panel.
	 */
	public CodeSpaceTab(FrontEnd frontEnd, int codeSpaceId) {
		_frontEnd = frontEnd;
		_frontEnd.addObserver(this);
		_myCsId = codeSpaceId;
		_myCs = _frontEnd.getCodeSpace(_myCsId);
		_name = _myCs.getCodeSpaceName();
		_codeLen = _myCs.getCodeLen();
		if (_myCs.hasExcludes()) {
			_excludes = String.valueOf(_myCs.getExcludes());
		} else {
			_excludes = "<NULL>";
		}
		_codeCount = _frontEnd.getCodesByCodeSpaceId(_myCsId).size();
		
		initialise();
		refreshCodesList();
	}
	
	private void generateCodes() {
		String n = JOptionPane.showInputDialog(this, "How many codes?", "Specify number of codes.", JOptionPane.QUESTION_MESSAGE);
		if (n != null) {
			_frontEnd.addCodes(Integer.valueOf(n), _myCsId);
			refreshCodesList();
		}
	}
	
	private void initialise() {
		_layout = new GridLayout(2, 1, 0, 0);
		setLayout(_layout);
		
		JPanel _codeListPanel = new JPanel();
		add(_codeListPanel);
		
		JButton btnGenCodes = new JButton("Gen Codes");
		btnGenCodes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				generateCodes();
			}
		});
		
		_codeListTable = new JTable();
		_codeListTableModel = new DefaultTableModel(
				new Object[0][0],
				new String[] { "Code", "Created", "Owner" }) 
				{
					Class[] columnTypes = new Class[] {
						String.class, String.class, String.class
					};
					public Class getColumnClass(int columnIndex) {
						return columnTypes[columnIndex];
					}
					boolean[] columnEditables = new boolean[] {
						false, false, false, false
					};
					public boolean isCellEditable(int row, int column) {
						return columnEditables[column];
					}
				};
		_codeListTable.setModel(_codeListTableModel);
		
		_codeListTable.getColumnModel().getColumn(0).setPreferredWidth(100);
		_codeListTable.getColumnModel().getColumn(1).setPreferredWidth(100);
		_codeListTable.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent e) {
			         Code code = getActiveCodeFromTable();
			         if (code != null) _codeInfoPanel.refreshCodeData(code);
			   }
			});
		
		JScrollPane codeListScrollPane = new JScrollPane(_codeListTable);
		
		JLabel lblCodeSpaceName = new JLabel("Code Space Name:");
		JLabel lblCodeLength = new JLabel("Code Length:");
		JLabel lblExcludes = new JLabel("Excludes:");
		JLabel lblTotalCodes = new JLabel("Total Codes:");
		_csNameLabel = new JLabel(_name);
		_codeLenLabel = new JLabel(String.valueOf(_codeLen));
		_excludesLabel = new JLabel(_excludes);
		_codesCountLabel = new JLabel(String.valueOf(_codeCount));
		
		GroupLayout gl__codeListPanel = new GroupLayout(_codeListPanel);
		gl__codeListPanel.setHorizontalGroup(
			gl__codeListPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl__codeListPanel.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl__codeListPanel.createParallelGroup(Alignment.LEADING)
						.addComponent(codeListScrollPane, GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
						.addComponent(btnGenCodes)
						.addGroup(gl__codeListPanel.createSequentialGroup()
							.addComponent(lblCodeSpaceName)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(_csNameLabel)
							.addGap(18)
							.addComponent(lblCodeLength)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(_codeLenLabel)
							.addGap(18)
							.addComponent(lblExcludes)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(_excludesLabel)
							.addGap(18)
							.addComponent(lblTotalCodes)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(_codesCountLabel)))
					.addContainerGap())
		);
		gl__codeListPanel.setVerticalGroup(
			gl__codeListPanel.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl__codeListPanel.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl__codeListPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblCodeSpaceName)
						.addComponent(_csNameLabel)
						.addComponent(lblCodeLength)
						.addComponent(_codeLenLabel)
						.addComponent(lblExcludes)
						.addComponent(_excludesLabel)
						.addComponent(lblTotalCodes)
						.addComponent(_codesCountLabel))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(codeListScrollPane, GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(btnGenCodes)
					.addContainerGap())
		);
		_codeListPanel.setLayout(gl__codeListPanel);
		
		_codeInfoPanel = new CodeInfoPanel();
		add(_codeInfoPanel);
	}
	
	private Code getActiveCodeFromTable() {
		int row;
		if ((row = this._codeListTable.getSelectedRow()) == -1) {
			return null;
		} else {
			String codeStr = (String) this._codeListTableModel.getValueAt(row, 0);
			return _frontEnd.getCode(codeStr);
		}
	}
	
	private void refreshCodesList() {
		_name = _myCs.getCodeSpaceName();
		_codeLen = _myCs.getCodeLen();
		if (_myCs.hasExcludes()) {
			_excludes = String.valueOf(_myCs.getExcludes());
		} else {
			_excludes = "<NULL>";
		}
		_codeCount = _frontEnd.getCodesByCodeSpaceId(_myCsId).size();
		_csNameLabel.setText(_name);
		_codeLenLabel.setText(String.valueOf(_codeLen));
		_excludesLabel.setText(_excludes);
		_codesCountLabel.setText(String.valueOf(_codeCount));
		int rowCount = _codeListTableModel.getRowCount();
		for (int i = rowCount; i > 0; i--) {
			_codeListTableModel.removeRow(i - 1);
		}
		
		for (Code code : _frontEnd.getCodesByCodeSpaceId(_myCsId)) {
			String userInfo;
			if (code.getOwnerType() == Code.FRONTEND_TYPE && code.getOwnerId() == -1) {
				userInfo = "No Owner Set";
			} else if (code.getOwnerType() == Code.FRONTEND_TYPE && code.getOwnerId() != -1) {
				userInfo = _frontEnd.getName();
			} else {
				userInfo = _frontEnd.getUser(code.getOwnerId()).toString();
			}
			Object[] data = new Object[] {
					code.getStringVal(), code.getCreationTimestamp().toString(), 
					userInfo
			};
			_codeListTableModel.addRow(data);
		}
	}

	@Override
	public void update(Observable o, Object arg) {
		refreshCodesList();
	}
	protected JPanel getCodeInfoPanel() {
		return _codeInfoPanel;
	}
}
